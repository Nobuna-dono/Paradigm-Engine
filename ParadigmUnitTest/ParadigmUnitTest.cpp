//File auto generated by SUnitTest Made by Paradigm development team
#include <map>
#include <string>
#include <iostream>
#include <exception>
#include <Shortcut/ParadigmDebug.h>
#include <iomanip>
#include <Shortcut/ParadigmMath.h>
#include <Core/Maths/FVector2.h>
#include <Core/Maths/FVector3.h>
#include <Core/Maths/FVector4.h>
#include <Core/Maths/FMatrix4.h>
#include <Core/Maths/FQuaternion.h>


int main()
{
unsigned int loopTimes = 1000;
	PRINT("All tests will be executed " + std::to_string(loopTimes) + " times.\n", LogLvl::CYAN);


																/* Includes/ParadigmMath.h */
	{
	std::map<std::string, std::string> successList;

  for(unsigned int i = 0; i < loopTimes ; ++i) {
//( Equalf,0.00001f,0.00001f,0.00001f)
	successList.insert({"Equalf",""});
	if(successList["Equalf"] == "") {
	try {

		if (!Equalf(0.00001f,0.00001f,0.00001f)) {
			successList["Equalf"] = "Unit test (ISTRUE) for Equalf returns a non-true value with these input values : (0.00001f,0.00001f,0.00001f)\n";
		}
	}
	catch (const std::exception&  except) {
		successList["Equalf"] = "Unit test for Equalf result by a crash with these input values : (0.00001f,0.00001f,0.00001f)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end ( Equalf,0.00001f,0.00001f,0.00001f)

//(Equalf, 0.00001f, 0.000015f, 0.000005f)
	if(successList["Equalf"] == "") {
	try {

		if (!Equalf( 0.00001f, 0.000015f, 0.000005f)) {
		}
		else {
			successList["Equalf"] = "Unit test (ISFALSE) for Equalf returns a true value with these input values : ( 0.00001f, 0.000015f, 0.000005f)\n";
		}
	}
	catch (const std::exception&  except) {
		successList["Equalf"] = "Unit test for Equalf result by a crash with these input values : ( 0.00001f, 0.000015f, 0.000005f)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Equalf, 0.00001f, 0.000015f, 0.000005f)

//(Equalfu, 0.00001f, 0.00001f, 4)
	successList.insert({"Equalfu",""});
	if(successList["Equalfu"] == "") {
	try {

		if (!Equalfu( 0.00001f, 0.00001f, 4)) {
			successList["Equalfu"] = "Unit test (ISTRUE) for Equalfu returns a non-true value with these input values : ( 0.00001f, 0.00001f, 4)\n";
		}
	}
	catch (const std::exception&  except) {
		successList["Equalfu"] = "Unit test for Equalfu result by a crash with these input values : ( 0.00001f, 0.00001f, 4)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Equalfu, 0.00001f, 0.00001f, 4)

//(Equalfu, 0.f, 0.000015f, 4)
	if(successList["Equalfu"] == "") {
	try {

		if (!Equalfu( 0.f, 0.000015f, 4)) {
			successList["Equalfu"] = "Unit test (ISTRUE) for Equalfu returns a non-true value with these input values : ( 0.f, 0.000015f, 4)\n";
		}
	}
	catch (const std::exception&  except) {
		successList["Equalfu"] = "Unit test for Equalfu result by a crash with these input values : ( 0.f, 0.000015f, 4)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Equalfu, 0.f, 0.000015f, 4)

//(Equalfu, 0.00001f, 0.000015f, 4)
	if(successList["Equalfu"] == "") {
	try {

		if (!Equalfu( 0.00001f, 0.000015f, 4)) {
		}
		else {
			successList["Equalfu"] = "Unit test (ISFALSE) for Equalfu returns a true value with these input values : ( 0.00001f, 0.000015f, 4)\n";
		}
	}
	catch (const std::exception&  except) {
		successList["Equalfu"] = "Unit test for Equalfu result by a crash with these input values : ( 0.00001f, 0.000015f, 4)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Equalfu, 0.00001f, 0.000015f, 4)

	}



	for (auto i = successList.begin(); i != successList.end(); i++)	{
		if (i->second == "") {
			PRINT(i->first + " OK.\n\t", LogLvl::GREEN);
		}
		else {
			PRINT(i->first + " FAIL :\n\t" + i->second, LogLvl::Error)
		}
	}
	}
	std::cout<<std::endl<<std::endl;


																/* Core/Maths/FVector2.h */
	{
	std::map<std::string, std::string> successList;

  for(unsigned int i = 0; i < loopTimes ; ++i) {
//(Core::Maths::FVector2, 0.f)
	successList.insert({"Core::Maths::FVector2",""});
	if(successList["Core::Maths::FVector2"] == "") {
	try {
		Core::Maths::FVector2 FVector2_UTest( 0.f);
//(DotProduct, { 0.f })(0.f)
	successList.insert({"FVector2_UTest.DotProduct",""});
	if(successList["FVector2_UTest.DotProduct"] == "") {
	try {
		auto result = FVector2_UTest.DotProduct( { 0.f });
		if (!Equalfu(result, (0.f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct didn't returns the expected value (0.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct result by a crash with these input values : ( { 0.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, { 0.f })(0.f)

//(DotProduct, { -99.7485f,13.2945f })(0.f)
	if(successList["FVector2_UTest.DotProduct"] == "") {
	try {
		auto result = FVector2_UTest.DotProduct( { -99.7485f,13.2945f });
		if (!Equalfu(result, (0.f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct didn't returns the expected value (0.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct result by a crash with these input values : ( { -99.7485f,13.2945f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, { -99.7485f,13.2945f })(0.f)

//(Magnitude)(0.f)
	successList.insert({"FVector2_UTest.Magnitude",""});
	if(successList["FVector2_UTest.Magnitude"] == "") {
	try {
		auto result = FVector2_UTest.Magnitude();
		if (!Equalfu(result, (0.f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.Magnitude"] = "Unit test (COMPARE) for FVector2_UTest.Magnitude didn't returns the expected value (0.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.Magnitude"] = "Unit test (COMPARE) for FVector2_UTest.Magnitude result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Magnitude)(0.f)

//(Normalized)(Core::Maths::FVector2{ 0.f })
	successList.insert({"FVector2_UTest.Normalized",""});
	if(successList["FVector2_UTest.Normalized"] == "") {
	try {
		auto result = FVector2_UTest.Normalized();
		if (result != (Core::Maths::FVector2{ 0.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.Normalized"] = "Unit test (COMPARE) for FVector2_UTest.Normalized didn't returns the expected value (Core::Maths::FVector2{ 0.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.Normalized"] = "Unit test (COMPARE) for FVector2_UTest.Normalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Normalized)(Core::Maths::FVector2{ 0.f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector2_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FVector2, -99.7485f, 13.2945f)
	if(successList["Core::Maths::FVector2"] == "") {
	try {
		Core::Maths::FVector2 FVector2_UTest( -99.7485f, 13.2945f);
//(DotProduct, { -61.1411f,62.5767f })(6930.6589f)
	if(successList["FVector2_UTest.DotProduct"] == "") {
	try {
		auto result = FVector2_UTest.DotProduct( { -61.1411f,62.5767f });
		if (!Equalfu(result, (6930.6589f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct didn't returns the expected value (6930.6589f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct result by a crash with these input values : ( { -61.1411f,62.5767f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, { -61.1411f,62.5767f })(6930.6589f)

//(DotProduct, { 17.6012f,-3.53374f })(-1802.6726f)
	if(successList["FVector2_UTest.DotProduct"] == "") {
	try {
		auto result = FVector2_UTest.DotProduct( { 17.6012f,-3.53374f });
		if (!Equalfu(result, (-1802.6726f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct didn't returns the expected value (-1802.6726f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct result by a crash with these input values : ( { 17.6012f,-3.53374f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, { 17.6012f,-3.53374f })(-1802.6726f)

//(Magnitude)(100.631f)
	if(successList["FVector2_UTest.Magnitude"] == "") {
	try {
		auto result = FVector2_UTest.Magnitude();
		if (!Equalfu(result, (100.631f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.Magnitude"] = "Unit test (COMPARE) for FVector2_UTest.Magnitude didn't returns the expected value (100.631f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.Magnitude"] = "Unit test (COMPARE) for FVector2_UTest.Magnitude result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Magnitude)(100.631f)

//(Normalized)(Core::Maths::FVector2{ -0.991235f, 0.132112f })
	if(successList["FVector2_UTest.Normalized"] == "") {
	try {
		auto result = FVector2_UTest.Normalized();
		if (result != (Core::Maths::FVector2{ -0.991235f, 0.132112f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.Normalized"] = "Unit test (COMPARE) for FVector2_UTest.Normalized didn't returns the expected value (Core::Maths::FVector2{ -0.991235f, 0.132112f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.Normalized"] = "Unit test (COMPARE) for FVector2_UTest.Normalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Normalized)(Core::Maths::FVector2{ -0.991235f, 0.132112f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector2_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FVector2, -61.1411f, 62.5767f)
	if(successList["Core::Maths::FVector2"] == "") {
	try {
		Core::Maths::FVector2 FVector2_UTest( -61.1411f, 62.5767f);
//(DotProduct, { -61.1411f,62.5767f })(7654.0774f)
	if(successList["FVector2_UTest.DotProduct"] == "") {
	try {
		auto result = FVector2_UTest.DotProduct( { -61.1411f,62.5767f });
		if (!Equalfu(result, (7654.0774f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct didn't returns the expected value (7654.0774f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct result by a crash with these input values : ( { -61.1411f,62.5767f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, { -61.1411f,62.5767f })(7654.0774f)

//(DotProduct, { 17.6012f,-3.53374f })(-1297.2865f)
	if(successList["FVector2_UTest.DotProduct"] == "") {
	try {
		auto result = FVector2_UTest.DotProduct( { 17.6012f,-3.53374f });
		if (!Equalfu(result, (-1297.2865f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct didn't returns the expected value (-1297.2865f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.DotProduct"] = "Unit test (COMPARE) for FVector2_UTest.DotProduct result by a crash with these input values : ( { 17.6012f,-3.53374f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, { 17.6012f,-3.53374f })(-1297.2865f)

//(Magnitude)(87.4876f)
	if(successList["FVector2_UTest.Magnitude"] == "") {
	try {
		auto result = FVector2_UTest.Magnitude();
		if (!Equalfu(result, (87.4876f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.Magnitude"] = "Unit test (COMPARE) for FVector2_UTest.Magnitude didn't returns the expected value (87.4876f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.Magnitude"] = "Unit test (COMPARE) for FVector2_UTest.Magnitude result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Magnitude)(87.4876f)

//(Normalized)(Core::Maths::FVector2{ -0.698855f, 0.715264f })
	if(successList["FVector2_UTest.Normalized"] == "") {
	try {
		auto result = FVector2_UTest.Normalized();
		if (result != (Core::Maths::FVector2{ -0.698855f, 0.715264f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector2_UTest.Normalized"] = "Unit test (COMPARE) for FVector2_UTest.Normalized didn't returns the expected value (Core::Maths::FVector2{ -0.698855f, 0.715264f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector2_UTest.Normalized"] = "Unit test (COMPARE) for FVector2_UTest.Normalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Normalized)(Core::Maths::FVector2{ -0.698855f, 0.715264f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector2_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

	}



	for (auto i = successList.begin(); i != successList.end(); i++)	{
		if (i->second == "") {
			PRINT(i->first + " OK.\n\t", LogLvl::GREEN);
		}
		else {
			PRINT(i->first + " FAIL :\n\t" + i->second, LogLvl::Error)
		}
	}
	}
	std::cout<<std::endl<<std::endl;


																/* Core/Maths/FVector3.h */
	{
	std::map<std::string, std::string> successList;

  for(unsigned int i = 0; i < loopTimes ; ++i) {
//(Core::Maths::FVector3, 0.f)
	successList.insert({"Core::Maths::FVector3",""});
	if(successList["Core::Maths::FVector3"] == "") {
	try {
		Core::Maths::FVector3 FVector3_UTest( 0.f);
//(DotProduct, Core::Maths::FVector3{ 0.f })(0.f)
	successList.insert({"FVector3_UTest.DotProduct",""});
	if(successList["FVector3_UTest.DotProduct"] == "") {
	try {
		auto result = FVector3_UTest.DotProduct( Core::Maths::FVector3{ 0.f });
		if (!Equalfu(result, (0.f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct didn't returns the expected value (0.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector3{ 0.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector3{ 0.f })(0.f)

//(DotProduct, Core::Maths::FVector3{ 62.5767f,17.6012f,-3.53374f })(0.f)
	if(successList["FVector3_UTest.DotProduct"] == "") {
	try {
		auto result = FVector3_UTest.DotProduct( Core::Maths::FVector3{ 62.5767f,17.6012f,-3.53374f });
		if (!Equalfu(result, (0.f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct didn't returns the expected value (0.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector3{ 62.5767f,17.6012f,-3.53374f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector3{ 62.5767f,17.6012f,-3.53374f })(0.f)

//(CrossProduct, Core::Maths::FVector3{ 0.f })(Core::Maths::FVector3{ 0.f })
	successList.insert({"FVector3_UTest.CrossProduct",""});
	if(successList["FVector3_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector3_UTest.CrossProduct( Core::Maths::FVector3{ 0.f });
		if (result != (Core::Maths::FVector3{ 0.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector3{ 0.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector3{ 0.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector3{ 0.f })(Core::Maths::FVector3{ 0.f })

//(CrossProduct, Core::Maths::FVector3{ 62.5767f,17.6012f,-3.53374f })(Core::Maths::FVector3{ 0.f })
	if(successList["FVector3_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector3_UTest.CrossProduct( Core::Maths::FVector3{ 62.5767f,17.6012f,-3.53374f });
		if (result != (Core::Maths::FVector3{ 0.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector3{ 0.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector3{ 62.5767f,17.6012f,-3.53374f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector3{ 62.5767f,17.6012f,-3.53374f })(Core::Maths::FVector3{ 0.f })

//(Magnitude)(0.f)
	successList.insert({"FVector3_UTest.Magnitude",""});
	if(successList["FVector3_UTest.Magnitude"] == "") {
	try {
		auto result = FVector3_UTest.Magnitude();
		if (!Equalfu(result, (0.f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.Magnitude"] = "Unit test (COMPARE) for FVector3_UTest.Magnitude didn't returns the expected value (0.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.Magnitude"] = "Unit test (COMPARE) for FVector3_UTest.Magnitude result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Magnitude)(0.f)

//(Normalized)(Core::Maths::FVector3{ 0.f })
	successList.insert({"FVector3_UTest.Normalized",""});
	if(successList["FVector3_UTest.Normalized"] == "") {
	try {
		auto result = FVector3_UTest.Normalized();
		if (result != (Core::Maths::FVector3{ 0.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.Normalized"] = "Unit test (COMPARE) for FVector3_UTest.Normalized didn't returns the expected value (Core::Maths::FVector3{ 0.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.Normalized"] = "Unit test (COMPARE) for FVector3_UTest.Normalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Normalized)(Core::Maths::FVector3{ 0.f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector3_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FVector3, 62.5767f, 17.6012f, -3.53374f)
	if(successList["Core::Maths::FVector3"] == "") {
	try {
		Core::Maths::FVector3 FVector3_UTest( 62.5767f, 17.6012f, -3.53374f);
//(DotProduct, Core::Maths::FVector3{ -29.5828f,80.1104f,65.411f })(-672.300f)
	if(successList["FVector3_UTest.DotProduct"] == "") {
	try {
		auto result = FVector3_UTest.DotProduct( Core::Maths::FVector3{ -29.5828f,80.1104f,65.411f });
		if (!Equalfu(result, (-672.300f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct didn't returns the expected value (-672.300f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector3{ -29.5828f,80.1104f,65.411f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector3{ -29.5828f,80.1104f,65.411f })(-672.300f)

//(DotProduct, Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })(-5791.87f)
	if(successList["FVector3_UTest.DotProduct"] == "") {
	try {
		auto result = FVector3_UTest.DotProduct( Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f });
		if (!Equalfu(result, (-5791.87f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct didn't returns the expected value (-5791.87f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })(-5791.87f)

//(CrossProduct, Core::Maths::FVector3{ -29.5828f,80.1104f,65.411f })(Core::Maths::FVector3{ 1434.4f, -3988.67f, 5533.74f })
	if(successList["FVector3_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector3_UTest.CrossProduct( Core::Maths::FVector3{ -29.5828f,80.1104f,65.411f });
		if (result != (Core::Maths::FVector3{ 1434.4f, -3988.67f, 5533.74f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector3{ 1434.4f, -3988.67f, 5533.74f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector3{ -29.5828f,80.1104f,65.411f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector3{ -29.5828f,80.1104f,65.411f })(Core::Maths::FVector3{ 1434.4f, -3988.67f, 5533.74f })

//(CrossProduct, Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })(Core::Maths::FVector3{ -1029.18f, 4178.49f, 2587.62f })
	if(successList["FVector3_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector3_UTest.CrossProduct( Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f });
		if (result != (Core::Maths::FVector3{ -1029.18f, 4178.49f, 2587.62f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector3{ -1029.18f, 4178.49f, 2587.62f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })(Core::Maths::FVector3{ -1029.18f, 4178.49f, 2587.62f })

//(Magnitude)(65.1009f)
	if(successList["FVector3_UTest.Magnitude"] == "") {
	try {
		auto result = FVector3_UTest.Magnitude();
		if (!Equalfu(result, (65.1009f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.Magnitude"] = "Unit test (COMPARE) for FVector3_UTest.Magnitude didn't returns the expected value (65.1009f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.Magnitude"] = "Unit test (COMPARE) for FVector3_UTest.Magnitude result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Magnitude)(65.1009f)

//(Normalized)(Core::Maths::FVector3{ 0.961226f, 0.270368f, -0.0542809f })
	if(successList["FVector3_UTest.Normalized"] == "") {
	try {
		auto result = FVector3_UTest.Normalized();
		if (result != (Core::Maths::FVector3{ 0.961226f, 0.270368f, -0.0542809f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.Normalized"] = "Unit test (COMPARE) for FVector3_UTest.Normalized didn't returns the expected value (Core::Maths::FVector3{ 0.961226f, 0.270368f, -0.0542809f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.Normalized"] = "Unit test (COMPARE) for FVector3_UTest.Normalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Normalized)(Core::Maths::FVector3{ 0.961226f, 0.270368f, -0.0542809f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector3_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FVector3, -29.5828f, 80.1104f, 65.411f)
	if(successList["Core::Maths::FVector3"] == "") {
	try {
		Core::Maths::FVector3 FVector3_UTest( -29.5828f, 80.1104f, 65.411f);
//(DotProduct, Core::Maths::FVector3{ -29.5828f, 80.1104f, 65.411f })(11571.4f)
	if(successList["FVector3_UTest.DotProduct"] == "") {
	try {
		auto result = FVector3_UTest.DotProduct( Core::Maths::FVector3{ -29.5828f, 80.1104f, 65.411f });
		if (!Equalfu(result, (11571.4f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct didn't returns the expected value (11571.4f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector3{ -29.5828f, 80.1104f, 65.411f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector3{ -29.5828f, 80.1104f, 65.411f })(11571.4f)

//(DotProduct, Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })(16.5671f)
	if(successList["FVector3_UTest.DotProduct"] == "") {
	try {
		auto result = FVector3_UTest.DotProduct( Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f });
		if (!Equalfu(result, (16.5671f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct didn't returns the expected value (16.5671f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.DotProduct"] = "Unit test (COMPARE) for FVector3_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })(16.5671f)

//(CrossProduct, Core::Maths::FVector3{ -29.5828f, 80.1104f, 65.411f })(Core::Maths::FVector3{ 0 })
	if(successList["FVector3_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector3_UTest.CrossProduct( Core::Maths::FVector3{ -29.5828f, 80.1104f, 65.411f });
		if (result != (Core::Maths::FVector3{ 0 })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector3{ 0 }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector3{ -29.5828f, 80.1104f, 65.411f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector3{ -29.5828f, 80.1104f, 65.411f })(Core::Maths::FVector3{ 0 })

//(CrossProduct, Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })(Core::Maths::FVector3{ -5767.64f, -8333.37f, 7597.6f })
	if(successList["FVector3_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector3_UTest.CrossProduct( Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f });
		if (result != (Core::Maths::FVector3{ -5767.64f, -8333.37f, 7597.6f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector3{ -5767.64f, -8333.37f, 7597.6f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector3_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector3{ -99.7485f,13.2945f,-61.1411f })(Core::Maths::FVector3{ -5767.64f, -8333.37f, 7597.6f })

//(Magnitude)(107.571f)
	if(successList["FVector3_UTest.Magnitude"] == "") {
	try {
		auto result = FVector3_UTest.Magnitude();
		if (!Equalfu(result, (107.571f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.Magnitude"] = "Unit test (COMPARE) for FVector3_UTest.Magnitude didn't returns the expected value (107.571f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.Magnitude"] = "Unit test (COMPARE) for FVector3_UTest.Magnitude result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Magnitude)(107.571f)

//(Normalized)(Core::Maths::FVector3{ -0.275008f, 0.744724f, 0.608076f })
	if(successList["FVector3_UTest.Normalized"] == "") {
	try {
		auto result = FVector3_UTest.Normalized();
		if (result != (Core::Maths::FVector3{ -0.275008f, 0.744724f, 0.608076f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector3_UTest.Normalized"] = "Unit test (COMPARE) for FVector3_UTest.Normalized didn't returns the expected value (Core::Maths::FVector3{ -0.275008f, 0.744724f, 0.608076f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector3_UTest.Normalized"] = "Unit test (COMPARE) for FVector3_UTest.Normalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Normalized)(Core::Maths::FVector3{ -0.275008f, 0.744724f, 0.608076f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector3_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

	}



	for (auto i = successList.begin(); i != successList.end(); i++)	{
		if (i->second == "") {
			PRINT(i->first + " OK.\n\t", LogLvl::GREEN);
		}
		else {
			PRINT(i->first + " FAIL :\n\t" + i->second, LogLvl::Error)
		}
	}
	}
	std::cout<<std::endl<<std::endl;


																/* Core/Maths/FVector4.h */
	{
	std::map<std::string, std::string> successList;

  for(unsigned int i = 0; i < loopTimes ; ++i) {
//(Core::Maths::FVector4, Core::Maths::FVector4::zero)
	successList.insert({"Core::Maths::FVector4",""});
	if(successList["Core::Maths::FVector4"] == "") {
	try {
		Core::Maths::FVector4 FVector4_UTest( Core::Maths::FVector4::zero);
//(DotProduct, Core::Maths::FVector4::zero)(0.f)
	successList.insert({"FVector4_UTest.DotProduct",""});
	if(successList["FVector4_UTest.DotProduct"] == "") {
	try {
		auto result = FVector4_UTest.DotProduct( Core::Maths::FVector4::zero);
		if (!Equalfu(result, (0.f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct didn't returns the expected value (0.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector4::zero)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector4::zero)(0.f)

//(DotProduct, Core::Maths::FVector4{ 62.5767f,17.6012f,-3.53374f, 1.f })(0.f)
	if(successList["FVector4_UTest.DotProduct"] == "") {
	try {
		auto result = FVector4_UTest.DotProduct( Core::Maths::FVector4{ 62.5767f,17.6012f,-3.53374f, 1.f });
		if (!Equalfu(result, (0.f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct didn't returns the expected value (0.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector4{ 62.5767f,17.6012f,-3.53374f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector4{ 62.5767f,17.6012f,-3.53374f, 1.f })(0.f)

//(CrossProduct, Core::Maths::FVector4::zero)(Core::Maths::FVector4::zero)
	successList.insert({"FVector4_UTest.CrossProduct",""});
	if(successList["FVector4_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector4_UTest.CrossProduct( Core::Maths::FVector4::zero);
		if (result != (Core::Maths::FVector4::zero)) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector4::zero).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector4::zero)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector4::zero)(Core::Maths::FVector4::zero)

//(CrossProduct, Core::Maths::FVector4{ 62.5767f,17.6012f,-3.53374f, 1.f })(Core::Maths::FVector4::zero)
	if(successList["FVector4_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector4_UTest.CrossProduct( Core::Maths::FVector4{ 62.5767f,17.6012f,-3.53374f, 1.f });
		if (result != (Core::Maths::FVector4::zero)) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector4::zero).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector4{ 62.5767f,17.6012f,-3.53374f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector4{ 62.5767f,17.6012f,-3.53374f, 1.f })(Core::Maths::FVector4::zero)

//(Magnitude)(0.f)
	successList.insert({"FVector4_UTest.Magnitude",""});
	if(successList["FVector4_UTest.Magnitude"] == "") {
	try {
		auto result = FVector4_UTest.Magnitude();
		if (!Equalfu(result, (0.f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Magnitude"] = "Unit test (COMPARE) for FVector4_UTest.Magnitude didn't returns the expected value (0.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Magnitude"] = "Unit test (COMPARE) for FVector4_UTest.Magnitude result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Magnitude)(0.f)

//(Normalized)(Core::Maths::FVector4::zero)
	successList.insert({"FVector4_UTest.Normalized",""});
	if(successList["FVector4_UTest.Normalized"] == "") {
	try {
		auto result = FVector4_UTest.Normalized();
		if (result != (Core::Maths::FVector4::zero)) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Normalized"] = "Unit test (COMPARE) for FVector4_UTest.Normalized didn't returns the expected value (Core::Maths::FVector4::zero).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Normalized"] = "Unit test (COMPARE) for FVector4_UTest.Normalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Normalized)(Core::Maths::FVector4::zero)


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector4_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FVector4, 62.5767f, 17.6012f, -3.53374f, 1.f)
	if(successList["Core::Maths::FVector4"] == "") {
	try {
		Core::Maths::FVector4 FVector4_UTest( 62.5767f, 17.6012f, -3.53374f, 1.f);
//(DotProduct, Core::Maths::FVector4{ -29.5828f,80.1104f,65.411f, 1.f })(-672.30029542f)
	if(successList["FVector4_UTest.DotProduct"] == "") {
	try {
		auto result = FVector4_UTest.DotProduct( Core::Maths::FVector4{ -29.5828f,80.1104f,65.411f, 1.f });
		if (!Equalfu(result, (-672.30029542f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct didn't returns the expected value (-672.30029542f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector4{ -29.5828f,80.1104f,65.411f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector4{ -29.5828f,80.1104f,65.411f, 1.f })(-672.30029542f)

//(DotProduct, Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })(-5791.876055836f)
	if(successList["FVector4_UTest.DotProduct"] == "") {
	try {
		auto result = FVector4_UTest.DotProduct( Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f });
		if (!Equalfu(result, (-5791.876055836f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct didn't returns the expected value (-5791.876055836f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })(-5791.876055836f)

//(CrossProduct, Core::Maths::FVector4{ -29.5828f,80.1104f,65.411f, 1.f })(Core::Maths::FVector4{ 1434.4f, -3988.67f, 5533.74f, 1.f })
	if(successList["FVector4_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector4_UTest.CrossProduct( Core::Maths::FVector4{ -29.5828f,80.1104f,65.411f, 1.f });
		if (result != (Core::Maths::FVector4{ 1434.4f, -3988.67f, 5533.74f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector4{ 1434.4f, -3988.67f, 5533.74f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector4{ -29.5828f,80.1104f,65.411f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector4{ -29.5828f,80.1104f,65.411f, 1.f })(Core::Maths::FVector4{ 1434.4f, -3988.67f, 5533.74f, 1.f })

//(CrossProduct, Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })(Core::Maths::FVector4{ -1029.18f, 4178.49f, 2587.62f, 1.f })
	if(successList["FVector4_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector4_UTest.CrossProduct( Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f });
		if (result != (Core::Maths::FVector4{ -1029.18f, 4178.49f, 2587.62f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector4{ -1029.18f, 4178.49f, 2587.62f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })(Core::Maths::FVector4{ -1029.18f, 4178.49f, 2587.62f, 1.f })

//(Magnitude)(65.1009f)
	if(successList["FVector4_UTest.Magnitude"] == "") {
	try {
		auto result = FVector4_UTest.Magnitude();
		if (!Equalfu(result, (65.1009f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Magnitude"] = "Unit test (COMPARE) for FVector4_UTest.Magnitude didn't returns the expected value (65.1009f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Magnitude"] = "Unit test (COMPARE) for FVector4_UTest.Magnitude result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Magnitude)(65.1009f)

//(Normalized)(Core::Maths::FVector4{ 0.961226f, 0.270368f, -0.0542809f, 1.f })
	if(successList["FVector4_UTest.Normalized"] == "") {
	try {
		auto result = FVector4_UTest.Normalized();
		if (result != (Core::Maths::FVector4{ 0.961226f, 0.270368f, -0.0542809f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Normalized"] = "Unit test (COMPARE) for FVector4_UTest.Normalized didn't returns the expected value (Core::Maths::FVector4{ 0.961226f, 0.270368f, -0.0542809f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Normalized"] = "Unit test (COMPARE) for FVector4_UTest.Normalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Normalized)(Core::Maths::FVector4{ 0.961226f, 0.270368f, -0.0542809f, 1.f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector4_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FVector4, -29.5828f, 80.1104f, 65.411f, 1.f)
	if(successList["Core::Maths::FVector4"] == "") {
	try {
		Core::Maths::FVector4 FVector4_UTest( -29.5828f, 80.1104f, 65.411f, 1.f);
//(DotProduct, Core::Maths::FVector4{ -29.5828f, 80.1104f, 65.411f, 1.f })(11571.417165f)
	if(successList["FVector4_UTest.DotProduct"] == "") {
	try {
		auto result = FVector4_UTest.DotProduct( Core::Maths::FVector4{ -29.5828f, 80.1104f, 65.411f, 1.f });
		if (!Equalfu(result, (11571.417165f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct didn't returns the expected value (11571.417165f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector4{ -29.5828f, 80.1104f, 65.411f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector4{ -29.5828f, 80.1104f, 65.411f, 1.f })(11571.417165f)

//(DotProduct, Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })(16.5671465f)
	if(successList["FVector4_UTest.DotProduct"] == "") {
	try {
		auto result = FVector4_UTest.DotProduct( Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f });
		if (!Equalfu(result, (16.5671465f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct didn't returns the expected value (16.5671465f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.DotProduct"] = "Unit test (COMPARE) for FVector4_UTest.DotProduct result by a crash with these input values : ( Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })(16.5671465f)

//(CrossProduct, Core::Maths::FVector4{ -29.5828f, 80.1104f, 65.411f, 1.f })(Core::Maths::FVector4::zero)
	if(successList["FVector4_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector4_UTest.CrossProduct( Core::Maths::FVector4{ -29.5828f, 80.1104f, 65.411f, 1.f });
		if (result != (Core::Maths::FVector4::zero)) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector4::zero).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector4{ -29.5828f, 80.1104f, 65.411f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector4{ -29.5828f, 80.1104f, 65.411f, 1.f })(Core::Maths::FVector4::zero)

//(CrossProduct, Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })(Core::Maths::FVector4{ -5767.64f, -8333.37f, 7597.6f, 1.f })
	if(successList["FVector4_UTest.CrossProduct"] == "") {
	try {
		auto result = FVector4_UTest.CrossProduct( Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f });
		if (result != (Core::Maths::FVector4{ -5767.64f, -8333.37f, 7597.6f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct didn't returns the expected value (Core::Maths::FVector4{ -5767.64f, -8333.37f, 7597.6f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.CrossProduct"] = "Unit test (COMPARE) for FVector4_UTest.CrossProduct result by a crash with these input values : ( Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (CrossProduct, Core::Maths::FVector4{ -99.7485f,13.2945f,-61.1411f, 1.f })(Core::Maths::FVector4{ -5767.64f, -8333.37f, 7597.6f, 1.f })

//(Magnitude)(107.571f)
	if(successList["FVector4_UTest.Magnitude"] == "") {
	try {
		auto result = FVector4_UTest.Magnitude();
		if (!Equalfu(result, (107.571f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Magnitude"] = "Unit test (COMPARE) for FVector4_UTest.Magnitude didn't returns the expected value (107.571f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Magnitude"] = "Unit test (COMPARE) for FVector4_UTest.Magnitude result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Magnitude)(107.571f)

//(Normalized)(Core::Maths::FVector4{ -0.275008f, 0.744724f, 0.608076f, 1.f })
	if(successList["FVector4_UTest.Normalized"] == "") {
	try {
		auto result = FVector4_UTest.Normalized();
		if (result != (Core::Maths::FVector4{ -0.275008f, 0.744724f, 0.608076f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Normalized"] = "Unit test (COMPARE) for FVector4_UTest.Normalized didn't returns the expected value (Core::Maths::FVector4{ -0.275008f, 0.744724f, 0.608076f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Normalized"] = "Unit test (COMPARE) for FVector4_UTest.Normalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Normalized)(Core::Maths::FVector4{ -0.275008f, 0.744724f, 0.608076f, 1.f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector4_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FVector4, 1000.f, 0.f, 0.f, 1.f)
	if(successList["Core::Maths::FVector4"] == "") {
	try {
		Core::Maths::FVector4 FVector4_UTest( 1000.f, 0.f, 0.f, 1.f);
//(Rotated, PI / 2, 0.f, 0.f)(Core::Maths::FVector4{ 1000.f, 0.f, 0.f, 1.f })
	successList.insert({"FVector4_UTest.Rotated",""});
	if(successList["FVector4_UTest.Rotated"] == "") {
	try {
		auto result = FVector4_UTest.Rotated( PI / 2, 0.f, 0.f);
		if (result != (Core::Maths::FVector4{ 1000.f, 0.f, 0.f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated didn't returns the expected value (Core::Maths::FVector4{ 1000.f, 0.f, 0.f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated result by a crash with these input values : ( PI / 2, 0.f, 0.f)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Rotated, PI / 2, 0.f, 0.f)(Core::Maths::FVector4{ 1000.f, 0.f, 0.f, 1.f })

//(Rotated, 0.f, PI / 2, 0.f)(Core::Maths::FVector4{ 0.f, 0.f, -1000.f, 1.f })
	if(successList["FVector4_UTest.Rotated"] == "") {
	try {
		auto result = FVector4_UTest.Rotated( 0.f, PI / 2, 0.f);
		if (result != (Core::Maths::FVector4{ 0.f, 0.f, -1000.f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated didn't returns the expected value (Core::Maths::FVector4{ 0.f, 0.f, -1000.f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated result by a crash with these input values : ( 0.f, PI / 2, 0.f)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Rotated, 0.f, PI / 2, 0.f)(Core::Maths::FVector4{ 0.f, 0.f, -1000.f, 1.f })

//(Rotated, 0.f, 0.f, PI / 2)(Core::Maths::FVector4{ 0.f, 1000.f, 0.f, 1.f })
	if(successList["FVector4_UTest.Rotated"] == "") {
	try {
		auto result = FVector4_UTest.Rotated( 0.f, 0.f, PI / 2);
		if (result != (Core::Maths::FVector4{ 0.f, 1000.f, 0.f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated didn't returns the expected value (Core::Maths::FVector4{ 0.f, 1000.f, 0.f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated result by a crash with these input values : ( 0.f, 0.f, PI / 2)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Rotated, 0.f, 0.f, PI / 2)(Core::Maths::FVector4{ 0.f, 1000.f, 0.f, 1.f })

//(Rotated, PI / 2, PI / 2, PI / 2)(Core::Maths::FVector4{ 1000.f, 0.f, 0.f, 1.f })
	if(successList["FVector4_UTest.Rotated"] == "") {
	try {
		auto result = FVector4_UTest.Rotated( PI / 2, PI / 2, PI / 2);
		if (result != (Core::Maths::FVector4{ 1000.f, 0.f, 0.f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated didn't returns the expected value (Core::Maths::FVector4{ 1000.f, 0.f, 0.f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated result by a crash with these input values : ( PI / 2, PI / 2, PI / 2)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Rotated, PI / 2, PI / 2, PI / 2)(Core::Maths::FVector4{ 1000.f, 0.f, 0.f, 1.f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector4_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FVector4,  0.f, 1000.f, 0.f, 1.f)
	if(successList["Core::Maths::FVector4"] == "") {
	try {
		Core::Maths::FVector4 FVector4_UTest(  0.f, 1000.f, 0.f, 1.f);
//(Rotated, PI / 2, 0.f, 0.f)(Core::Maths::FVector4{ 0.f, 0.f, 1000.f, 1.f })
	if(successList["FVector4_UTest.Rotated"] == "") {
	try {
		auto result = FVector4_UTest.Rotated( PI / 2, 0.f, 0.f);
		if (result != (Core::Maths::FVector4{ 0.f, 0.f, 1000.f, 1.f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated didn't returns the expected value (Core::Maths::FVector4{ 0.f, 0.f, 1000.f, 1.f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FVector4_UTest.Rotated"] = "Unit test (COMPARE) for FVector4_UTest.Rotated result by a crash with these input values : ( PI / 2, 0.f, 0.f)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Rotated, PI / 2, 0.f, 0.f)(Core::Maths::FVector4{ 0.f, 0.f, 1000.f, 1.f })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FVector4_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

	}



	for (auto i = successList.begin(); i != successList.end(); i++)	{
		if (i->second == "") {
			PRINT(i->first + " OK.\n\t", LogLvl::GREEN);
		}
		else {
			PRINT(i->first + " FAIL :\n\t" + i->second, LogLvl::Error)
		}
	}
	}
	std::cout<<std::endl<<std::endl;


																/* Core/Maths/FMatrix4.h */
	{
	std::map<std::string, std::string> successList;

  for(unsigned int i = 0; i < loopTimes ; ++i) {
//(Core::Maths::FMatrix4)
	successList.insert({"Core::Maths::FMatrix4",""});
	if(successList["Core::Maths::FMatrix4"] == "") {
	try {
		Core::Maths::FMatrix4 FMatrix4_UTest;
//(Inverse)(Core::Maths::FMatrix4::identity)
	successList.insert({"FMatrix4_UTest.Inverse",""});
	if(successList["FMatrix4_UTest.Inverse"] == "") {
	try {
		auto result = FMatrix4_UTest.Inverse();
		if (result != (Core::Maths::FMatrix4::identity)) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FMatrix4_UTest.Inverse"] = "Unit test (COMPARE) for FMatrix4_UTest.Inverse didn't returns the expected value (Core::Maths::FMatrix4::identity).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FMatrix4_UTest.Inverse"] = "Unit test (COMPARE) for FMatrix4_UTest.Inverse result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Inverse)(Core::Maths::FMatrix4::identity)

//(Determinant)(1.f)
	successList.insert({"FMatrix4_UTest.Determinant",""});
	if(successList["FMatrix4_UTest.Determinant"] == "") {
	try {
		auto result = FMatrix4_UTest.Determinant();
		if (result != (1.f)) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FMatrix4_UTest.Determinant"] = "Unit test (COMPARE) for FMatrix4_UTest.Determinant didn't returns the expected value (1.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FMatrix4_UTest.Determinant"] = "Unit test (COMPARE) for FMatrix4_UTest.Determinant result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Determinant)(1.f)

//(Transposed)(Core::Maths::FMatrix4::identity)
	successList.insert({"FMatrix4_UTest.Transposed",""});
	if(successList["FMatrix4_UTest.Transposed"] == "") {
	try {
		auto result = FMatrix4_UTest.Transposed();
		if (result != (Core::Maths::FMatrix4::identity)) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FMatrix4_UTest.Transposed"] = "Unit test (COMPARE) for FMatrix4_UTest.Transposed didn't returns the expected value (Core::Maths::FMatrix4::identity).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FMatrix4_UTest.Transposed"] = "Unit test (COMPARE) for FMatrix4_UTest.Transposed result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Transposed)(Core::Maths::FMatrix4::identity)


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FMatrix4_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FMatrix4, { 1.f,0.f,2.f,4.f, 0.f,1.f,3.f,2.f, 2.f,-1.f,0.f,3.f, 4.f,-1.f,3.f,9.f })
	if(successList["Core::Maths::FMatrix4"] == "") {
	try {
		Core::Maths::FMatrix4 FMatrix4_UTest( { 1.f,0.f,2.f,4.f, 0.f,1.f,3.f,2.f, 2.f,-1.f,0.f,3.f, 4.f,-1.f,3.f,9.f });
//(Inverse)(Core::Maths::FMatrix4{ {-3.f,0.f,-2.f,2.f, -6.f,-3.f,-11.f,7.f, 2.f,2.f,5.f,-3.f, 0.f,-1.f,-2.f,1.f} })
	if(successList["FMatrix4_UTest.Inverse"] == "") {
	try {
		auto result = FMatrix4_UTest.Inverse();
		if (result != (Core::Maths::FMatrix4{ {-3.f,0.f,-2.f,2.f, -6.f,-3.f,-11.f,7.f, 2.f,2.f,5.f,-3.f, 0.f,-1.f,-2.f,1.f} })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FMatrix4_UTest.Inverse"] = "Unit test (COMPARE) for FMatrix4_UTest.Inverse didn't returns the expected value (Core::Maths::FMatrix4{ {-3.f,0.f,-2.f,2.f, -6.f,-3.f,-11.f,7.f, 2.f,2.f,5.f,-3.f, 0.f,-1.f,-2.f,1.f} }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FMatrix4_UTest.Inverse"] = "Unit test (COMPARE) for FMatrix4_UTest.Inverse result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Inverse)(Core::Maths::FMatrix4{ {-3.f,0.f,-2.f,2.f, -6.f,-3.f,-11.f,7.f, 2.f,2.f,5.f,-3.f, 0.f,-1.f,-2.f,1.f} })

//(Determinant)(-1.f)
	if(successList["FMatrix4_UTest.Determinant"] == "") {
	try {
		auto result = FMatrix4_UTest.Determinant();
		if (result != (-1.f)) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FMatrix4_UTest.Determinant"] = "Unit test (COMPARE) for FMatrix4_UTest.Determinant didn't returns the expected value (-1.f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FMatrix4_UTest.Determinant"] = "Unit test (COMPARE) for FMatrix4_UTest.Determinant result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Determinant)(-1.f)

//(Transposed)(Core::Maths::FMatrix4{ {1.f,0.f,2.f,4.f, 0.f,1.f,-1.f,-1.f, 2.f,3.f,0.f,3.f, 4.f,2.f,3.f,9.f} })
	if(successList["FMatrix4_UTest.Transposed"] == "") {
	try {
		auto result = FMatrix4_UTest.Transposed();
		if (result != (Core::Maths::FMatrix4{ {1.f,0.f,2.f,4.f, 0.f,1.f,-1.f,-1.f, 2.f,3.f,0.f,3.f, 4.f,2.f,3.f,9.f} })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FMatrix4_UTest.Transposed"] = "Unit test (COMPARE) for FMatrix4_UTest.Transposed didn't returns the expected value (Core::Maths::FMatrix4{ {1.f,0.f,2.f,4.f, 0.f,1.f,-1.f,-1.f, 2.f,3.f,0.f,3.f, 4.f,2.f,3.f,9.f} }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FMatrix4_UTest.Transposed"] = "Unit test (COMPARE) for FMatrix4_UTest.Transposed result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Transposed)(Core::Maths::FMatrix4{ {1.f,0.f,2.f,4.f, 0.f,1.f,-1.f,-1.f, 2.f,3.f,0.f,3.f, 4.f,2.f,3.f,9.f} })

//(Mult, { {1.f,2.f,3.f,4.f, 5.f,6.f,7.f,8.f, 9.f,10.f,11.f,12.f, 13.f,14.f,15.f,16.f} })(Core::Maths::FMatrix4{ {71.f,78.f,85.f,92.f, 58.f,64.f,70.f,76.f, 36.f,40.f,44.f,48.f, 143.f,158.f,173.f,188.f } })
	successList.insert({"FMatrix4_UTest.Mult",""});
	if(successList["FMatrix4_UTest.Mult"] == "") {
	try {
		auto result = FMatrix4_UTest.Mult( { {1.f,2.f,3.f,4.f, 5.f,6.f,7.f,8.f, 9.f,10.f,11.f,12.f, 13.f,14.f,15.f,16.f} });
		if (result != (Core::Maths::FMatrix4{ {71.f,78.f,85.f,92.f, 58.f,64.f,70.f,76.f, 36.f,40.f,44.f,48.f, 143.f,158.f,173.f,188.f } })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FMatrix4_UTest.Mult"] = "Unit test (COMPARE) for FMatrix4_UTest.Mult didn't returns the expected value (Core::Maths::FMatrix4{ {71.f,78.f,85.f,92.f, 58.f,64.f,70.f,76.f, 36.f,40.f,44.f,48.f, 143.f,158.f,173.f,188.f } }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FMatrix4_UTest.Mult"] = "Unit test (COMPARE) for FMatrix4_UTest.Mult result by a crash with these input values : ( { {1.f,2.f,3.f,4.f, 5.f,6.f,7.f,8.f, 9.f,10.f,11.f,12.f, 13.f,14.f,15.f,16.f} })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Mult, { {1.f,2.f,3.f,4.f, 5.f,6.f,7.f,8.f, 9.f,10.f,11.f,12.f, 13.f,14.f,15.f,16.f} })(Core::Maths::FMatrix4{ {71.f,78.f,85.f,92.f, 58.f,64.f,70.f,76.f, 36.f,40.f,44.f,48.f, 143.f,158.f,173.f,188.f } })


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FMatrix4_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

//(Core::Maths::FMatrix4::CreateRotationMatrix, -PI / 2.f, PI / 2.f, PI)(Core::Maths::FMatrix4{ { 0.f,1.f,0.f,0.f, 0.f,0.f,-1.f,0.f, -1.f,0.f,0.f,0.0f, 0.f,0.f,0.0f,1.f } })
	successList.insert({"Core::Maths::FMatrix4::CreateRotationMatrix",""});
	if(successList["Core::Maths::FMatrix4::CreateRotationMatrix"] == "") {
	try {
		auto result = Core::Maths::FMatrix4::CreateRotationMatrix( -PI / 2.f, PI / 2.f, PI);
		if (result != (Core::Maths::FMatrix4{ { 0.f,1.f,0.f,0.f, 0.f,0.f,-1.f,0.f, -1.f,0.f,0.f,0.0f, 0.f,0.f,0.0f,1.f } })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["Core::Maths::FMatrix4::CreateRotationMatrix"] = "Unit test (COMPARE) for Core::Maths::FMatrix4::CreateRotationMatrix didn't returns the expected value (Core::Maths::FMatrix4{ { 0.f,1.f,0.f,0.f, 0.f,0.f,-1.f,0.f, -1.f,0.f,0.f,0.0f, 0.f,0.f,0.0f,1.f } }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["Core::Maths::FMatrix4::CreateRotationMatrix"] = "Unit test (COMPARE) for Core::Maths::FMatrix4::CreateRotationMatrix result by a crash with these input values : ( -PI / 2.f, PI / 2.f, PI)\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Core::Maths::FMatrix4::CreateRotationMatrix, -PI / 2.f, PI / 2.f, PI)(Core::Maths::FMatrix4{ { 0.f,1.f,0.f,0.f, 0.f,0.f,-1.f,0.f, -1.f,0.f,0.f,0.0f, 0.f,0.f,0.0f,1.f } })

	}



	for (auto i = successList.begin(); i != successList.end(); i++)	{
		if (i->second == "") {
			PRINT(i->first + " OK.\n\t", LogLvl::GREEN);
		}
		else {
			PRINT(i->first + " FAIL :\n\t" + i->second, LogLvl::Error)
		}
	}
	}
	std::cout<<std::endl<<std::endl;


																/* Core/Maths/FQuaternion.h */
	{
	std::map<std::string, std::string> successList;

  for(unsigned int i = 0; i < loopTimes ; ++i) {
//(Core::Maths::FQuaternion,5.67f, 1.23f, 2.34f, 3.45f)
	successList.insert({"Core::Maths::FQuaternion",""});
	if(successList["Core::Maths::FQuaternion"] == "") {
	try {
		Core::Maths::FQuaternion FQuaternion_UTest(5.67f, 1.23f, 2.34f, 3.45f);
//(DotProduct, { 4, 3.9f, -1.f, 3.f })(12.807f)
	successList.insert({"FQuaternion_UTest.DotProduct",""});
	if(successList["FQuaternion_UTest.DotProduct"] == "") {
	try {
		auto result = FQuaternion_UTest.DotProduct( { 4, 3.9f, -1.f, 3.f });
		if (!Equalfu(result, (12.807f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FQuaternion_UTest.DotProduct"] = "Unit test (COMPARE) for FQuaternion_UTest.DotProduct didn't returns the expected value (12.807f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FQuaternion_UTest.DotProduct"] = "Unit test (COMPARE) for FQuaternion_UTest.DotProduct result by a crash with these input values : ( { 4, 3.9f, -1.f, 3.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (DotProduct, { 4, 3.9f, -1.f, 3.f })(12.807f)

//(ToMatrix4)(Core::Maths::FMatrix4{ { -33.75620f,-33.36660f,35.02260f,0.00000f, 44.87940f,-25.83080f,2.19780f,0.00000f, -18.04860f,30.09420f,-12.97700f,0.00000f, 0.00000f,0.00000f,0.00000f,1.00000f } })
	successList.insert({"FQuaternion_UTest.ToMatrix4",""});
	if(successList["FQuaternion_UTest.ToMatrix4"] == "") {
	try {
		auto result = FQuaternion_UTest.ToMatrix4();
		if (result != (Core::Maths::FMatrix4{ { -33.75620f,-33.36660f,35.02260f,0.00000f, 44.87940f,-25.83080f,2.19780f,0.00000f, -18.04860f,30.09420f,-12.97700f,0.00000f, 0.00000f,0.00000f,0.00000f,1.00000f } })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FQuaternion_UTest.ToMatrix4"] = "Unit test (COMPARE) for FQuaternion_UTest.ToMatrix4 didn't returns the expected value (Core::Maths::FMatrix4{ { -33.75620f,-33.36660f,35.02260f,0.00000f, 44.87940f,-25.83080f,2.19780f,0.00000f, -18.04860f,30.09420f,-12.97700f,0.00000f, 0.00000f,0.00000f,0.00000f,1.00000f } }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FQuaternion_UTest.ToMatrix4"] = "Unit test (COMPARE) for FQuaternion_UTest.ToMatrix4 result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (ToMatrix4)(Core::Maths::FMatrix4{ { -33.75620f,-33.36660f,35.02260f,0.00000f, 44.87940f,-25.83080f,2.19780f,0.00000f, -18.04860f,30.09420f,-12.97700f,0.00000f, 0.00000f,0.00000f,0.00000f,1.00000f } })

//(Conjugate)(Core::Maths::FQuaternion{ 5.67f, -1.23f, -2.34f, -3.45f })
	successList.insert({"FQuaternion_UTest.Conjugate",""});
	if(successList["FQuaternion_UTest.Conjugate"] == "") {
	try {
		auto result = FQuaternion_UTest.Conjugate();
		if (result != (Core::Maths::FQuaternion{ 5.67f, -1.23f, -2.34f, -3.45f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FQuaternion_UTest.Conjugate"] = "Unit test (COMPARE) for FQuaternion_UTest.Conjugate didn't returns the expected value (Core::Maths::FQuaternion{ 5.67f, -1.23f, -2.34f, -3.45f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FQuaternion_UTest.Conjugate"] = "Unit test (COMPARE) for FQuaternion_UTest.Conjugate result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Conjugate)(Core::Maths::FQuaternion{ 5.67f, -1.23f, -2.34f, -3.45f })

//(GetInvert)(Core::Maths::FQuaternion{ 0.11109f, -0.0240988f, -0.0458465f, -0.0675942f, })
	successList.insert({"FQuaternion_UTest.GetInvert",""});
	if(successList["FQuaternion_UTest.GetInvert"] == "") {
	try {
		auto result = FQuaternion_UTest.GetInvert();
		if (result != (Core::Maths::FQuaternion{ 0.11109f, -0.0240988f, -0.0458465f, -0.0675942f, })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FQuaternion_UTest.GetInvert"] = "Unit test (COMPARE) for FQuaternion_UTest.GetInvert didn't returns the expected value (Core::Maths::FQuaternion{ 0.11109f, -0.0240988f, -0.0458465f, -0.0675942f, }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FQuaternion_UTest.GetInvert"] = "Unit test (COMPARE) for FQuaternion_UTest.GetInvert result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (GetInvert)(Core::Maths::FQuaternion{ 0.11109f, -0.0240988f, -0.0458465f, -0.0675942f, })

//(GetNormalized)(Core::Maths::FQuaternion{ 5.67f, 1.23f, 2.34f, 3.45f } / 7.14422f)
	successList.insert({"FQuaternion_UTest.GetNormalized",""});
	if(successList["FQuaternion_UTest.GetNormalized"] == "") {
	try {
		auto result = FQuaternion_UTest.GetNormalized();
		if (result != (Core::Maths::FQuaternion{ 5.67f, 1.23f, 2.34f, 3.45f } / 7.14422f)) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FQuaternion_UTest.GetNormalized"] = "Unit test (COMPARE) for FQuaternion_UTest.GetNormalized didn't returns the expected value (Core::Maths::FQuaternion{ 5.67f, 1.23f, 2.34f, 3.45f } / 7.14422f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FQuaternion_UTest.GetNormalized"] = "Unit test (COMPARE) for FQuaternion_UTest.GetNormalized result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (GetNormalized)(Core::Maths::FQuaternion{ 5.67f, 1.23f, 2.34f, 3.45f } / 7.14422f)

//(Mult, { 4, 3.9f, -1.f, 3.f })(Core::Maths::FQuaternion{ 9.873f, 37.503f, 13.455f, 20.454f })
	successList.insert({"FQuaternion_UTest.Mult",""});
	if(successList["FQuaternion_UTest.Mult"] == "") {
	try {
		auto result = FQuaternion_UTest.Mult( { 4, 3.9f, -1.f, 3.f });
		if (result != (Core::Maths::FQuaternion{ 9.873f, 37.503f, 13.455f, 20.454f })) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FQuaternion_UTest.Mult"] = "Unit test (COMPARE) for FQuaternion_UTest.Mult didn't returns the expected value (Core::Maths::FQuaternion{ 9.873f, 37.503f, 13.455f, 20.454f }).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FQuaternion_UTest.Mult"] = "Unit test (COMPARE) for FQuaternion_UTest.Mult result by a crash with these input values : ( { 4, 3.9f, -1.f, 3.f })\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (Mult, { 4, 3.9f, -1.f, 3.f })(Core::Maths::FQuaternion{ 9.873f, 37.503f, 13.455f, 20.454f })

//(GetLength)(7.14422f)
	successList.insert({"FQuaternion_UTest.GetLength",""});
	if(successList["FQuaternion_UTest.GetLength"] == "") {
	try {
		auto result = FQuaternion_UTest.GetLength();
		if (!Equalfu(result, (7.14422f))) {
			std::stringstream ss;	ss << std::setprecision(5) << result;
			successList["FQuaternion_UTest.GetLength"] = "Unit test (COMPARE) for FQuaternion_UTest.GetLength didn't returns the expected value (7.14422f).\n	 Actual result : " + ss.str()+ "\n";
		}
	}
	catch (const std::exception&  except) {
		successList["FQuaternion_UTest.GetLength"] = "Unit test (COMPARE) for FQuaternion_UTest.GetLength result by a crash with these input values : ()\n"+ std::string(except.what())+"\n";
	}
	}//end of if
//end (GetLength)(7.14422f)


	}
	catch (const std::exception&  ecept) {

		PRINT("Unit test (CLASS) constructor for FQuaternion_UTest result by a crash\n", LogLvl::Error);
		PRINT(std::string(ecept.what())+"\n", LogLvl::Error);
	}//end of trycatch
	}//end of if
//end (CLASS)

	}



	for (auto i = successList.begin(); i != successList.end(); i++)	{
		if (i->second == "") {
			PRINT(i->first + " OK.\n\t", LogLvl::GREEN);
		}
		else {
			PRINT(i->first + " FAIL :\n\t" + i->second, LogLvl::Error)
		}
	}
	}
	std::cout<<std::endl<<std::endl;

	system("pause");
	return 0;
}